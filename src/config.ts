/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An API metadata descriptor to facilitate generating Azure Function endpoints
 */
export interface ApiMetadata {
  /**
   * A prefix to add to each function name
   */
  functionPrefix?: string;
  /**
   * The name of the API project for human friendly naming
   */
  projectName: string;
  
  folders?: Folders;
  /**
   * An array of schemas used to generate JSON models. These schemas drive the type definition and the JSON validation when Requests are submitted
   */
  models?: Model[];
  /**
   * An array of enitty definitions, that translates to endpoints
   */
  endPoints?: Endpoint[];
}
/**
 * A list of folder configuration to store different elements of the API construct
 */
export interface Folders {
  /**
   * A folder to store action functions that will be call directly by the ACTION end point
   */
  actionFunctions?: string;
  /**
   * A folder to store models, the generator will create a Request and a Response subfolder to further organize models
   */
  models?: string;
  /**
   * A folder where schemas can be found
   */
  schemas?: string;
  /**
   * A folder to store test for TDD implementations like Jest and Jenkings
   */
  test?: string;
  /**
   * A folder to store validation functions that will be call directly by the ACTION end point
   */
  validation?: string;
}
/**
 * An object describing the model including its schema
 */
export interface Model {
  /**
   * The name of the model, this is used to name the type
   */
  modelName: string;
  /**
   * The schema definition file name
   */
  modelSchemaFile: string;
}
/**
 * End point description
 */
export interface Endpoint {
  /**
   * The name of the entity, if no alias is provided this will be referenced in the route
   */
  name?: string;
  /**
   * The alias to use in the route for this endpoint
   */
  alias?: string;
  /**
   * The name of the entity that owns the current entity. This is used for route chaining like: organization/123/users or organization/123/users/4566
   */
  parentEntity?: string;
  /**
   * The type of value passed in the route chain to access a single record, this translates to attribute routing in Azure functions. e.g. oragnizations/12323/users/ymartinez has a singularity type number for organization and string for users
   */
  singularityType?: ("alpha" | "guid" | "int" | "long") & string;
  /**
   * Whether the API exposes a direct route to the endpoint instead of the chaining route
   */
  forceDirectRoute?: boolean;
  /**
   * Name of the Azure function containing all the actions
   */
  azFunctionName: string;
  /**
   * A list of actions to implement for the entity, Actions match HTTP verbs like GET, POST, PUT, and DELETE. Actions are restricted to those actions allowed by Azure functions
   */
  actions?: {
    get?: GenericAction;
    post?: GenericAction;
    put?: GenericAction;
    patch?: GenericAction;
    delete?: GenericAction;
  };
}
/**
 * A method in the Azure function that handle get request and filtering
 */
export interface GenericAction {
  /**
   * Include a single record result for get base using singularity parameter
   */
  implementSingularity?: boolean;
  /**
   * The name of the request model as defined in the models section
   */
  requestModel: string;
  /**
   * The name of the response model as defined in the models section
   */
  responseModel: string;
  /**
   * The name of the action function implementing the logic behind the end point. If using OOP the class name followed by the method: MyClass.MyMethod, if using functional programming the function name is enough
   */
  actionFunction: string;
}
